syntax = "proto2";
package roki;

message RangeRequest {
  required Fallbacks from = 1;
  required Fallbacks to = 2;

  required Timestamp datetime = 3;

  optional DatetimeRepresents datetime_represents = 4;
  optional RealtimeLevel realtime_level = 5;
  optional uint32 max_nb_of_legs = 6;
  optional Duration max_journey_duration = 7;
  optional Criteria criteria = 8;
  optional Duration range_duration = 9;
  optional Filters filters = 10;

  optional Duration transfer_min_wait_duration = 11;

}


message JourneyRequest {
  required Fallbacks from = 1;
  required Fallbacks to = 2;

  required Timestamp datetime = 3;

  optional DatetimeRepresents datetime_represents = 4;
  optional RealtimeLevel realtime_level = 5;
  optional uint32 max_nb_of_legs = 6;
  optional Duration max_journey_duration = 7;
  optional Criteria criteria = 8;
  optional Filters filters = 9;

  optional Duration leg_time_penalty = 10;
  optional Duration leg_walking_penalty = 11;
  optional Duration transfer_min_wait_duration = 12;

}

message Fallbacks {
  repeated StationFallback stations = 1;
  repeated StopFallback stops = 2;
  repeated BoxFallback stations_within = 3;
  repeated BoxFallback stops_within = 4;
}

message StationFallback {
  required string station_id = 1;
  optional Duration duration = 2;
}

message StopFallback {
  required string stop_id = 1;
  optional Duration duration = 2;
}

message BoxFallback {
  required Coord center = 1;
  required Distance distance = 2;
}

message Distance {
  required uint32 meters = 1;
}


enum DatetimeRepresents {
  Departure = 1;
  Arrival = 2;
}

enum RealtimeLevel {
  Base = 1;
  Realtime = 2;
}

enum Criteria {
  Time = 1;
  TimeAndLegs = 2;
  TimeAndWalking = 3;

}

message Filters {
  repeated string allowed_stop = 1;
  repeated string allowed_station = 2;

  repeated string forbidden_stop = 3;
  repeated string forbidden_station = 4;


  repeated string allowed_trip = 5;
  repeated string allowed_route = 6;
  repeated string allowed_agency = 7;
  repeated string allowed_route_type = 8;

  repeated string forbidden_trip = 9;
  repeated string forbidden_route = 10;
  repeated string forbidden_agency = 11;
  repeated string forbidden_route_type = 12;

  optional bool wheelchair = 13;
  optional bool bike = 14;
}

message Response {
  repeated Journey journeys = 1;

  repeated Trip trips = 2;
  repeated Route routes = 3;
  repeated Stop stops = 4;
  repeated Station stations = 5;
  repeated Agency agencies = 6;
  repeated TripUpdate trip_updates = 7;
  repeated ServiceAlert service_alerts = 8;
}

message Trip {
  required string id = 1;
  // idx in Response.routes
  optional uint32 route_idx = 2;
  optional string headsign = 3;
  optional string short_name = 4;
  optional Direction direction = 5;
  optional bool wheelchair_boarding = 6;
  optional bool bikes_allowed = 7;

}

enum Direction {
  Outbound = 0;
  Inbound = 1;
}

message Route {
  required string id = 1;
  // idx in Response.agencies
  required uint32 agency_idx = 2;
  optional string short_name = 3;
  optional string long_name = 4;
  optional string description = 5;
  required RouteType route_type = 6;
  optional string url = 7;
  optional Color color = 8;
  optional Color text_color = 9;
}

enum RouteType {
  Tram = 0;
  Subway = 1;
  Rail = 2;
  Bus = 3;
  Ferry = 4;
  CableTram = 5;
  AerialLift = 6;
  Funicular = 7;
  TrolleyBus = 11;
  Monorail = 12;
}

message Color {
  required string hex = 1;

}

message Agency {
  required string id = 1;
  required string name = 2;
  required string url = 3;
  required string timezone = 4;
  optional string lang = 5;

}

message Stop {
  required string id =1;
  required string name = 2;
  optional string code = 3;
  optional string description = 4;
  required Coord coord = 5;
  optional string zone_id = 6;
  optional string url = 7;
  //idx in Response.stations
  optional uint32 station_idx = 8;
  optional string timezone = 9;
  optional bool wheelchair_boarding = 10;

}

message Station {
  required string id =1;
  required string name = 2;
  optional string code = 3;
  optional string description = 4;
  required Coord coord = 5;
  optional string url = 7;
  optional string timezone = 8;
  optional bool wheelchair_boarding = 9;
}

message Coord {
  required double lat = 1;
  required double lon = 2;
}

message Journey {
  required Timestamp departure_time = 1;
  required Timestamp arrival_time = 2;
  required Duration departure_fallback = 3;
  required Duration arrival_fallback = 4;
  repeated Leg Legs = 5;
  repeated Transfer transfers = 6;
}

message Timestamp {
  // number of seconds since Jan 1st 1970
  required uint64 seconds = 1;
}

message Duration {
  required uint32 seconds = 1;
}


message Transfer {
  required Duration walking = 1;
  required Duration wait = 2;
}

message Date {
  // YYYYMMDD
  required string date = 1;
}

message Leg {
  // idx in Response.trips
  required uint32 trip_idx = 1;
  required Date trip_date = 2;
  repeated StopTime stop_times = 3;
  // idx in Response.trip_udpates
  optional uint32 trip_update = 4;
  // idx in Response.service_alerts
  repeated uint32 service_alerts = 5;
}

message StopTime {
  required Timestamp board_time = 1;
  required Timestamp debark_time = 2;
  // idx in Response.stops
  required uint32 stop_idx = 3;
  required bool can_board = 4;
  required bool can_debark = 5;
  optional string stop_headsign = 6;
}

message TripUpdate {
  required string feed_name = 1;
  required Timestamp feed_timestamp = 2;
  required string trip_update_id = 3;
  optional Timestamp trip_update_timestamp = 4;
}

message ServiceAlert {
  required string feed_name = 1;
  required Timestamp feed_timestamp = 2;
  required string service_alert_id = 3;
  repeated Period active_periods = 5;
  required Cause cause = 6;
  required Effect effect = 7;
  required Severity severity = 8;
  optional Translations url = 10;
  optional Translations header = 11;
  optional Translations description = 12;
}

message Period {
  optional Timestamp start = 1;
  optional Timestamp end = 2;
}

enum Cause {
    UNKNOWN_CAUSE = 1;
    OTHER_CAUSE = 2;
    TECHNICAL_PROBLEM = 3;
    STRIKE = 4;
    DEMONSTRATION = 5;
    ACCIDENT = 6;
    HOLIDAY = 7;
    WEATHER = 8;
    MAINTENANCE = 9;
    CONSTRUCTION = 10;
    POLICE_ACTIVITY = 11;
    MEDICAL_EMERGENCY = 12;
  }
enum Effect {
    NO_SERVICE = 1;
    REDUCED_SERVICE = 2;
    SIGNIFICANT_DELAYS = 3;
    DETOUR = 4;
    ADDITIONAL_SERVICE = 5;
    MODIFIED_SERVICE = 6;
    OTHER_EFFECT = 7;
    UNKNOWN_EFFECT = 8;
    STOP_MOVED = 9;
    NO_EFFECT = 10;
    ACCESSIBILITY_ISSUE = 11;
  }

enum Severity {
	UNKNOWN_SEVERITY = 1;
	INFO = 2;
	WARNING = 3;
	SEVERE = 4;
  }

message Translations {
  optional string text_no_lang = 1;
  repeated Translation translations = 2;
}

message Translation {
  required string lang = 1;
  required string text = 2;
}
